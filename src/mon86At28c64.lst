     1                                          CPU 8086
     2                                          BITS 16
     3                                  
     4                                  %imacro setloc  1.nolist
     5                                  %assign pad_bytes (%1-($-$$)-START)
     6                                  %if pad_bytes < 0
     7                                  %assign over_bytes -pad_bytes
     8                                  %error Preceding code extends beyond setloc location by over_bytes bytes
     9                                  %endif
    10                                  %if pad_bytes > 0
    11                                  %warning Inserting pad_bytes bytes
    12                                   times  pad_bytes db 0FFh
    13                                  %endif
    14                                  %endm
    15                                  ;History
    16                                  ; 2444 - Version 10.0.01 implemented print2
    17                                  ; 2444 - Version 10.0.01 fixed erro in UART_TX, no push de BX
    18                                  ; 2444 - Version 10.0.02 implemented prompt
    19                                  ; 2445 - Version 10.0.03 now run in a 32k bytes of eeprom.
    20                                  ;                        START = 0x8000
    21                                  ;                        init2 = 0xE000
    22                                  ;                        reset = 0xFFF0
    23                                  ; 0C000h
    24                                  
    25                                  %define	START		08000h		; BIOS starts at offset 08000h
    26                                  %define DATE		'22/10/24'
    27                                  %define MODEL_BYTE	0FEh		; IBM PC/XT
    28                                  %define VERSION		'1.0.02'	; BIOS version
    29                                  
    30                                  %define context_off  0x0
    31                                  %define context_seg  0x2
    32                                  %define context_len  0x4
    33                                  %define context_val  0x6000
    34                                  
    35                                  bioscseg	equ	0F000h
    36                                  dramcseg        equ     06000h
    37                                  biosdseg	equ	0040h
    38                                  
    39                                  post_reg	equ	80h
    40                                  serial_timeout	equ	7Ch	; byte[4] - serial port timeout values
    41                                  equip_serial	equ	00h	; word[4] - addresses of serial ports
    42                                  unused_reg	equ	0C0h	; used for hardware detection and I/O delays
    43                                  equipment_list	equ	10h	; word - equpment list
    44                                  
    45                                  reg_addr_dump   equ     0x0000
    46                                  reg_buff_read   equ     0x0002  ; buffer 255 bytes
    47                                  reg_counter     equ     0x0100  ; char counter in the buffer
    48                                  reg_next_dumm   equ     0x0101  ; next variable
    49                                  
    50                                          org	START
    51                                  
    52 00000000 E99060                             jmp     init
    53                                             ;12345678901234567890
    54 00000003 38303838202D204350-     msg0    db "8088 - CPU TXM/8 III",0
    54 0000000C 552054584D2F382049-
    54 00000015 494900             
    55 00000018 5061756C6F2053696C-     msg1    db "Paulo Silva  (c)2024",0
    55 00000021 766120202863293230-
    55 0000002A 323400             
    56 0000002D 4D6F6E383620562031-     msg2    db "Mon86 V 1.0.00 2443A",0
    56 00000036 2E302E303020323434-
    56 0000003F 334100             
    57 00000042 314D42206472616D20-     msg3    db "1MB dram rom at28c64",0
    57 0000004B 726F6D206174323863-
    57 00000054 363400             
    58 00000057 0028145450              row:    db 0, 40, 20, 84, 80
    59                                  
    60 0000005C FF<rep 5FA4h>                   setloc	0E000h
    60          ******************       warning: Inserting 24484 bytes [-w+user]
    61                                  
    62 00006000 585420383038382042-     welcome		db	"XT 8088 BIOS, Version "
    62 00006009 494F532C2056657273-
    62 00006012 696F6E20           
    63 00006016 312E302E3032            		db	VERSION
    64 0000601C 2E200D                  		db	". ", 0Dh
    65 0000601F 5061756C6F2053696C-     		db	"Paulo Silva(pgordao) - Copyright (C) 2024", 0Dh
    65 00006028 76612870676F726461-
    65 00006031 6F29202D20436F7079-
    65 0000603A 726967687420284329-
    65 00006043 20323032340D       
    66 00006049 43505520383038382D-     		db	"CPU 8088-2   board TXM/8 III  ", 0Dh
    66 00006052 32202020626F617264-
    66 0000605B 2054584D2F38204949-
    66 00006064 4920200D           
    67 00006068 4D6F6E383620562031-     		db	"Mon86 V ",VERSION ," 2443A 1MB Dram Rom at28c64", 0Dh, 0
    67 00006071 2E302E303220323434-
    67 0000607A 334120314D42204472-
    67 00006083 616D20526F6D206174-
    67 0000608C 32386336340D00     
    68                                          
    69                                  init:
    70 00006093 FA                              cli				; disable interrupts
    71 00006094 FC                              cld				; clear direction flag
    72 00006095 B80060                          mov ax, 0x6000
    73 00006098 8EC0                            mov es, ax
    74 0000609A B80070                          mov ax, 0x7000                  ; Segmento Stack
    75 0000609D 8ED0                            mov ss, ax
    76 0000609F B800F0                          mov ax, 0xF000
    77 000060A2 8ED8                            mov ds, ax
    78 000060A4 31E4                            xor sp, sp
    79 000060A6 BB0001                          mov  bx,  reg_counter
    80 000060A9 26C60700                        mov  byte es:[bx], 0x0 
    81                                  
    82 000060AD E87601                          call configure_uart
    83                                  
    84 000060B0 E80203                          call scr_clear
    85                                  
    86 000060B3 BB[0060]                        mov  bx, welcome
    87 000060B6 E81D02                          call print2
    88                                  
    89 000060B9 B800E0                          mov AX, 0xE000
    90 000060BC E80500                          call writeRegAddrDump
    91 000060BF E84000                          call dump
    92 000060C2 EB39                            jmp MainLoop
    93                                  
    94                                  writeRegAddrDump:
    95 000060C4 50                              push AX
    96 000060C5 B80060                          mov AX, dramcseg ; Segmento DRAM
    97 000060C8 8EC0                            mov ES, AX
    98 000060CA 58                              pop AX
    99 000060CB 26A30000                        mov word es:[reg_addr_dump], AX
   100 000060CF 268B1E0000                      mov bx, word es:[reg_addr_dump]
   101 000060D4 C3                              ret
   102                                  
   103                                  ReadLine:
   104 000060D5 B100                            mov cl,0x0
   105 000060D7 BB0200                          mov  bx,  reg_buff_read
   106                                  loop:
   107 000060DA E89100                          call printPrompt
   108                                  loopP:  ;RX blocante
   109 000060DD E89E01                          call UART_RX_blct       
   110                                   ;       jnc  loopP
   111 000060E0 E8A801                          call printch
   112                                  
   113 000060E3 268807                          mov  byte es:[bx], al 
   114 000060E6 26C6470100                      mov  byte es:[bx+1], 0x0 
   115 000060EB 43                              inc  bx
   116                                  
   117 000060EC 3C0A                            CMP  AL, 0x0A
   118 000060EE 75ED                            JNZ  loopP
   119 000060F0 E88100                          call printLf
   120 000060F3 E87800                          call printPrompt
   121 000060F6 BB0200                          mov  BX, reg_buff_read
   122 000060F9 E8EA01                          call printFromDram
   123 000060FC C3                              ret
   124                                  
   125                                  MainLoop:
   126 000060FD E8D5FF                          call ReadLine
   127 00006100 EBFB                            jmp MainLoop        
   128                                  ;=================================
   129                                  ; Dump memory
   130                                  ; Memory address: bx
   131                                  ;        counter: cx
   132                                  dump:
   133 00006102 1E                              PUSH DS
   134 00006103 B800F0                          MOV  AX, 0xF000
   135 00006106 8ED8                            MOV DS, AX
   136 00006108 B110                            mov  Cl, 16
   137                                  
   138                                  dump_01:        
   139 0000610A B00D                            mov  al, 0x0d
   140 0000610C E87C01                          call UART_TX
   141 0000610F 89D8                            mov  AX, BX
   142 00006111 E8D500                          call print_hex
   143 00006114 B03A                            mov  al, ':'
   144 00006116 E87201                          call UART_TX
   145 00006119 B020                            MOV  AL, ' '
   146 0000611B E86D01                          CALL printch
   147                                          
   148                                          ;;Write 16 bytes em hexadecimal
   149 0000611E B510                            MOV  CH, 16
   150                                  dump_02:
   151 00006120 3E8A07                          MOV  AL, DS:[BX]
   152 00006123 E89400                          CALL byte_to_hex_str
   153 00006126 50                              PUSH AX
   154 00006127 E86101                          CALL printch
   155 0000612A 58                              POP  AX
   156 0000612B 88E0                            MOV  AL, AH
   157 0000612D E85B01                          CALL printch
   158 00006130 B020                            MOV  AL, ' '
   159 00006132 E85601                          CALL printch
   160 00006135 43                              INC  BX
   161 00006136 FECD                            DEC  CH
   162 00006138 75E6                            JNZ  dump_02
   163                                          ;;Wrote 16 bytes
   164                                  
   165 0000613A B020                            MOV  AL, ' '
   166 0000613C E84C01                          CALL printch
   167                                  
   168 0000613F 83EB10                          SUB  BX, 16
   169                                  
   170                                          ;;Write 16 bytes em ASCII
   171 00006142 B510                            MOV  CH, 16
   172                                  dump_03:
   173 00006144 3E8A07                          MOV  AL, DS:[BX]
   174 00006147 3C20                            CMP  AL, 0x20
   175 00006149 720E                            JC  printPonto ; Flag carry set to 1 AL < 0x20
   176 0000614B 3C80                            CMP  AL, 0x80
   177 0000614D 730A                            JnC  printPonto ; Flag carry set to 0 AL > 0x80
   178 0000614F E83901                          CALL printch
   179 00006152 43                              INC  BX
   180 00006153 FECD                            DEC  CH
   181 00006155 75ED                            JNZ  dump_03
   182 00006157 EB0A                            jmp  dump_Fim
   183                                  printPonto:        
   184 00006159 B02E                            MOV  AL, '.'
   185 0000615B E82D01                          CALL printch
   186 0000615E 43                              INC  BX
   187 0000615F FECD                            DEC  CH
   188 00006161 75E1                            JNZ  dump_03
   189                                          ;;Wrote 16 bytes
   190                                  
   191                                  dump_Fim:
   192 00006163 FEC9                            DEC  CL
   193 00006165 75A3                            JNZ  dump_01
   194 00006167 B00D                            mov  al, 0x0d
   195 00006169 E81F01                          call UART_TX
   196 0000616C 1F                              POP DS
   197 0000616D C3                              ret
   198                                  
   199                                  printPrompt:
   200 0000616E B03E                            mov al, '>'
   201 00006170 E81801                          call printch
   202 00006173 C3                              ret
   203                                  
   204                                  printLf:
   205 00006174 B00D                            mov al, 0x0D
   206 00006176 E81201                          call printch
   207 00006179 C3                              ret
   208                                  
   209                                  
   210                                  lcdMessage:
   211 0000617A E8D501                          call lcdInit
   212                                  
   213 0000617D B400                            mov  ah, 0
   214 0000617F B000                            mov  al, 0
   215 00006181 E8A201                          call setCursor
   216 00006184 BB[0300]                        mov  bx,msg0
   217 00006187 E88E01                          call printstr
   218                                  
   219 0000618A B400                            mov  ah, 0
   220 0000618C B001                            mov  al, 1
   221 0000618E E89501                          call setCursor
   222 00006191 BB[1800]                        mov  bx,msg1
   223 00006194 E88101                          call printstr
   224                                  
   225 00006197 B400                            mov  ah, 0
   226 00006199 B002                            mov  al, 2
   227 0000619B E88801                          call setCursor
   228 0000619E BB[2D00]                        mov  bx,msg2
   229 000061A1 E87401                          call printstr
   230                                  
   231 000061A4 B400                            mov  ah, 0
   232 000061A6 B003                            mov  al, 3
   233 000061A8 E87B01                          call setCursor
   234 000061AB BB[4200]                        mov  bx,msg3
   235 000061AE E86701                          call printstr
   236 000061B1 C3                              ret
   237                                  
   238                                  writeRam:
   239 000061B2 268807                          mov byte ES:[BX], AL
   240 000061B5 C3                              ret
   241                                  readRam:
   242 000061B6 268A07                          mov AL, byte ES:[BX]
   243 000061B9 C3                              ret
   244                                  ;byte_to_hex_str
   245                                  ;This function return in AX the ascii code for hexadecimal number from 0 to F
   246                                  ;Parameters:
   247                                  ;               AL = imput
   248                                  ;               AX = output
   249                                  ;Changes CL
   250                                  byte_to_hex_str:
   251 000061BA 51                              PUSH CX
   252 000061BB 88C4                            mov ah, al
   253 000061BD B104                            mov cl, 4
   254 000061BF D2E8                            shr al, cl
   255 000061C1 250F0F                          and ax, 0x0f0f
   256 000061C4 3C09                            cmp al, 0x09
   257 000061C6 7602                            jbe .1
   258 000061C8 0407                            add al, 'A' - '0' - 10
   259                                  .1:
   260 000061CA 80FC09                          cmp ah, 0x09
   261 000061CD 7603                            jbe .2
   262 000061CF 80C407                          add ah, 'A' - '0' - 10
   263                                  .2:
   264 000061D2 053030                          add ax, "00"
   265                                  .ret:
   266 000061D5 59                              POP CX
   267 000061D6 C3                              ret
   268                                  
   269                                  ;=========================================================================
   270                                  ; print_digit - print hexadecimal digit
   271                                  ; Input:
   272                                  ;	AL - bits 3...0 - digit to print (0...F)
   273                                  ; Output:
   274                                  ;	none
   275                                  ;-------------------------------------------------------------------------
   276                                  print_digit:
   277 000061D7 50                      	push	ax
   278 000061D8 53                      	push	bx
   279 000061D9 240F                    	and	al,0Fh
   280 000061DB 0430                    	add	al,'0'			; convert to ASCII
   281 000061DD 3C39                    	cmp	al,'9'			; less or equal 9?
   282 000061DF 7602                    	jna	.1
   283 000061E1 0407                    	add	al,'A'-'9'-1		; a hex digit
   284                                  .1:
   285 000061E3 E8A500                          call    printch
   286 000061E6 5B                      	pop	bx
   287 000061E7 58                      	pop	ax
   288 000061E8 C3                      	ret
   289                                  
   290                                  ;=========================================================================
   291                                  ; print_hex - print 16-bit number in hexadecimal
   292                                  ; Input:
   293                                  ;	AX - number to print
   294                                  ; Output:
   295                                  ;	none
   296                                  ;-------------------------------------------------------------------------
   297                                  print_hex:
   298 000061E9 86C4                    	xchg	al,ah
   299 000061EB E80600                  	call	print_byte		; print the upper byte
   300 000061EE 86C4                    	xchg	al,ah
   301 000061F0 E80100                  	call	print_byte		; print the lower byte
   302 000061F3 C3                      	ret
   303                                  ;=========================================================================
   304                                  ; print_byte - print a byte in hexadecimal
   305                                  ; Input:
   306                                  ;	AL - byte to print
   307                                  ; Output:
   308                                  ;	none
   309                                  ;-------------------------------------------------------------------------
   310                                  print_byte:
   311 000061F4 D0C0                    	rol	al,1
   312 000061F6 D0C0                    	rol	al,1
   313 000061F8 D0C0                    	rol	al,1
   314 000061FA D0C0                    	rol	al,1
   315 000061FC E8D8FF                  	call	print_digit
   316 000061FF D0C0                    	rol	al,1
   317 00006201 D0C0                    	rol	al,1
   318 00006203 D0C0                    	rol	al,1
   319 00006205 D0C0                    	rol	al,1
   320 00006207 E8CDFF                  	call	print_digit
   321 0000620A C3                      	ret
   322                                  
   323                                  %include "DRV16C550_8088.asm"		
     1                              <1>         CPU 8086
     2                              <1>         BITS 16
     3                              <1> 
     4                              <1> ; Port
     5 0000620B F803                <1> COM1:	DW		0x3F8
     6                              <1> ; Here are the port numbers for various UART registers:
     7                              <1> uart_tx_rx 		EQU  0x3f8 ; 0 DLAB = 0 for Regs. TX and RX
     8                              <1> uart_DLL 		EQU  0x3f8 ; 0 DLAB = 1 Divisor lacth low
     9                              <1> uart_IER 		EQU  0x3f9 ; 1 DLAB = 0 Interrupt Enable Register
    10                              <1> uart_DLH 		EQU  0x3f9 ; 1 DLAB = 1 Divisor lacth high
    11                              <1> uart_ISR 		EQU  0x3fa ; 2 IIR Interrupt Ident. Register READ ONLY
    12                              <1> uart_FCR 		EQU  0x3fa ; 2 Fifo Control Resgister WRITE ONLY
    13                              <1> uart_LCR 		EQU  0x3fb ; 3 Line Control Register
    14                              <1> uart_MCR 		EQU  0x3fc ; 4 Modem Control Register
    15                              <1> uart_LSR 		EQU  0x3fd ; 5 Line Status Register
    16                              <1> uart_MSR 		EQU  0x3fe ; 6 Modem Status Register
    17                              <1> uart_scratch 	EQU  0x3ff ; 7 SCR Scratch Register
    18                              <1> 
    19                              <1> UART_FREQUENCY		equ 4915000
    20                              <1> ;Fomula UART_FREQUENCY/(  9600 * 16)
    21                              <1> ;Baudrates
    22                              <1> UART_BAUD_9600		EQU 32
    23                              <1> UART_BAUD_19200		EQU 16
    24                              <1> UART_BAUD_38400		EQU  8
    25                              <1> UART_BAUD_56800		EQU  5
    26                              <1> UART_BAUD_115200	EQU  3
    27                              <1> UART_BAUD_230400	EQU  1
    28                              <1> 
    29                              <1> UART_TX_WAIT		EQU	0x7fff		; Count before a TX times out
    30                              <1> 
    31 0000620D 53657269616C206472- <1> msg0_01:   db "Serial driver for 16C550",0
    31 00006216 6976657220666F7220- <1>
    31 0000621F 31364335353000      <1>
    32                              <1> ;configure_uart
    33                              <1> ;Parameters:None
    34                              <1> ;			
    35                              <1> ;			
    36                              <1> configure_uart:
    37 00006226 B9FF1F              <1> 			mov cx, 0x1fff
    38 00006229 E8CA00              <1> 			call	basicDelay
    39 0000622C B000                <1> 			MOV		AL,0x0	 		;
    40 0000622E BAF903              <1> 			MOV		DX, uart_IER
    41 00006231 EE                  <1> 			OUT  	DX,	AL	; Disable interrupts
    42                              <1> 
    43 00006232 B91F00              <1> 			mov cx, 0x1f
    44 00006235 E8BE00              <1> 			call	basicDelay
    45                              <1> 
    46 00006238 B080                <1> 			MOV		AL, 0x80			;
    47 0000623A BAFB03              <1> 			MOV		DX, uart_LCR
    48 0000623D EE                  <1> 			OUT     DX,	AL 	; Turn DLAB on
    49 0000623E B91F00              <1> 			mov cx, 0x1f
    50 00006241 E8B200              <1> 			call	basicDelay
    51                              <1> 
    52 00006244 B008                <1> 			MOV		AL, UART_BAUD_38400 ;0x08
    53 00006246 BAF803              <1> 			MOV		DX, uart_DLL
    54 00006249 EE                  <1> 			OUT     DX,   AL	; Set divisor low
    55 0000624A B91F00              <1> 			mov cx, 0x1f
    56 0000624D E8A600              <1> 			call	basicDelay
    57                              <1> 
    58 00006250 B000                <1> 			MOV		AL, 0x00		;
    59 00006252 BAF903              <1> 			MOV		DX, uart_DLH
    60 00006255 EE                  <1> 			OUT     DX,	AL	; Set divisor high
    61 00006256 B91F00              <1> 			mov cx, 0x1f
    62 00006259 E89A00              <1> 			call	basicDelay
    63                              <1> 
    64 0000625C B003                <1> 			MOV     AL, 0x03	; AH	
    65 0000625E BAFB03              <1> 			MOV		DX, uart_LCR
    66 00006261 EE                  <1> 			OUT     DX,	AL	; Write out flow control bits 8,1,N
    67 00006262 B91F00              <1> 			mov cx, 0x1f
    68 00006265 E88E00              <1> 			call	basicDelay
    69                              <1> 
    70 00006268 B081                <1> 			MOV 	AL,0x81			;
    71 0000626A BAFA03              <1> 			MOV		DX, uart_ISR
    72 0000626D EE                  <1> 			OUT     DX,	AL	; Turn on FIFO, with trigger level of 8.
    73                              <1> 								                ; This turn on the 16bytes buffer!
    74 0000626E C3                  <1> 			RET
    75                              <1> ;UART_RX:
    76                              <1> ;Parameters: 
    77                              <1> ;			AL = return the available character
    78                              <1> ;			If al returns with a valid char flag carry is set, otherwise
    79                              <1> ;			flag carry is clear
    80                              <1> UART_RX:	
    81 0000626F BAFD03              <1> 			MOV DX, uart_LSR
    82 00006272 EC                  <1> 			IN	AL, DX	 		; Get the line status register
    83 00006273 2401                <1> 			AND AL, 0x01		; Check for characters in buffer
    84 00006275 F8                  <1> 			CLC 				; Clear carry
    85 00006276 7405                <1> 			JZ	END				; Just ret (with carry clear) if no characters
    86 00006278 BAF803              <1> 			MOV DX, uart_tx_rx
    87 0000627B EC                  <1> 			IN	AL, DX			; Read the character from the UART receive buffer
    88 0000627C F9                  <1> 			STC 				; Set the carry flag
    89                              <1> END:			
    90 0000627D C3                  <1> 			RET
    91                              <1> 
    92                              <1> UART_RX_blct:	
    93 0000627E BAFD03              <1> 			MOV DX, uart_LSR
    94 00006281 EC                  <1> 			IN	AL, DX	 		; Get the line status register
    95 00006282 2401                <1> 			AND AL, 0x01		; Check for characters in buffer
    96 00006284 74F8                <1> 			JZ	UART_RX_blct	; Just loopif no characters
    97 00006286 BAF803              <1> 			MOV DX, uart_tx_rx
    98 00006289 EC                  <1> 			IN	AL, DX			; Read the character from the UART receive buffer
    99 0000628A C3                  <1> 			RET
   100                              <1> 
   101                              <1> 
   102                              <1> printch:
   103                              <1> UART_TX:	
   104 0000628B 52                  <1> 			PUSH DX
   105 0000628C 51                  <1> 			PUSH CX 	
   106 0000628D 53                  <1> 			PUSH BX
   107 0000628E 50                  <1> 			PUSH AX
   108 0000628F BBFF7F              <1> 			MOV BX, UART_TX_WAIT	; Set CB to the transmit timeout
   109                              <1> LOOP_UART_TX:
   110 00006292 BAFD03              <1> 			MOV DX, uart_LSR
   111 00006295 EC                  <1> 			IN	AL,	DX 				; Get the line status register
   112 00006296 2460                <1> 			AND AL, 0x60			; Check for TX empty
   113 00006298 750D                <1> 			JNZ	OUT_UART_TX			; If set, then TX is empty, goto transmit
   114 0000629A B9FF17              <1> 			mov	cx, 0x17ff
   115 0000629D E85600              <1> 			call basicDelay
   116 000062A0 4B                  <1> 			DEC	BX
   117 000062A1 75EF                <1> 			JNZ LOOP_UART_TX		; Otherwise loop
   118 000062A3 58                  <1> 			POP	AX					; We've timed out at this point so
   119 000062A4 5B                  <1> 			POP BX
   120 000062A5 F8                  <1> 			CLC						; Clear the carry flag and preserve AX
   121 000062A6 C3                  <1> 			RET
   122                              <1> OUT_UART_TX:
   123 000062A7 58                  <1> 			POP	AX					; Good to send at this point, so	
   124 000062A8 3C0D                <1> 			CMP AL, 0x0D
   125 000062AA 740F                <1> 			JZ  println
   126 000062AC BAF803              <1> 			MOV	DX, uart_tx_rx
   127 000062AF EE                  <1> 			OUT	DX, AL		; Write the character to the UART transmit buffer
   128 000062B0 B9FF02              <1> 			mov	cx, 0x2ff
   129 000062B3 E84000              <1> 			call basicDelay
   130 000062B6 5B                  <1> 			POP BX
   131 000062B7 59                  <1> 			POP CX
   132 000062B8 5A                  <1> 			POP DX
   133 000062B9 F9                  <1> 			STC						; Set carry flag
   134 000062BA C3                  <1> 			RET
   135                              <1> println:
   136 000062BB BAF803              <1> 			MOV	DX, uart_tx_rx
   137 000062BE EE                  <1> 			OUT	DX, AL		; Write the character to the UART transmit buffer
   138 000062BF B9FF00              <1> 			mov	cx, 0xff
   139 000062C2 E83100              <1> 			call basicDelay
   140 000062C5 B00A                <1> 			MOV AL, 0x0A
   141 000062C7 BAF803              <1> 			MOV	DX, uart_tx_rx
   142 000062CA EE                  <1> 			OUT	DX, AL		; Write the character to the UART transmit buffer
   143 000062CB B9FF00              <1> 			mov	CX, 0xff
   144 000062CE E82500              <1> 			call basicDelay
   145 000062D1 5B                  <1> 			POP BX	
   146 000062D2 59                  <1> 			POP CX
   147 000062D3 5A                  <1> 			POP DX
   148 000062D4 F9                  <1> 			STC						; Set carry flag
   149 000062D5 C3                  <1> 			RET
   150                              <1> 
   151                              <1> ;print
   152                              <1> ;parameters:
   153                              <1> ;          bx = message address
   154                              <1> ;
   155                              <1> ;print:
   156                              <1> ;        	mov  al,byte ds:[bx]
   157                              <1> ;        	cmp  al,0h
   158                              <1> ;        	jz   fimPrint;
   159                              <1> ;
   160                              <1> ;			MOV	DX, uart_tx_rx
   161                              <1> ; ;       	OUT	DX, AL
   162                              <1> ;			mov	cx, 0xff
   163                              <1> ;			call basicDelay
   164                              <1> ;
   165                              <1> ;        	inc  bx
   166                              <1> ;        	jmp  print
   167                              <1> ;fimPrint:   ret
   168                              <1> 
   169                              <1> print2:
   170 000062D6 3E8A07              <1>         	mov  al,byte ds:[bx]
   171 000062D9 3C00                <1>         	cmp  al,0h
   172 000062DB 7408                <1>         	jz   fimPrint2
   173                              <1> cont:
   174 000062DD E8ABFF              <1> 			call UART_TX
   175 000062E0 73FB                <1> 			JNC	cont
   176                              <1> 
   177 000062E2 43                  <1>         	inc  bx
   178 000062E3 EBF1                <1>         	jmp  print2
   179 000062E5 C3                  <1> fimPrint2:   ret		
   180                              <1> 
   181                              <1> printFromDram:
   182 000062E6 268A07              <1>         	mov  al,byte es:[bx]
   183 000062E9 3C00                <1>         	cmp  al,0h
   184 000062EB 7408                <1>         	jz   fimPrintFromDram
   185                              <1> 
   186                              <1> contFromDram:
   187 000062ED E89BFF              <1> 			call UART_TX
   188 000062F0 73FB                <1> 			JNC	contFromDram
   189 000062F2 43                  <1>         	inc  bx
   190 000062F3 EBF1                <1>         	jmp  printFromDram
   191                              <1> 
   192                              <1> fimPrintFromDram:  
   193 000062F5 C3                  <1> 			ret		
   194                              <1> 
   195                              <1> ;print3:
   196                              <1> ;        	mov  al,byte ds:[bx]
   197                              <1> ;        	cmp  al,0h
   198                              <1> ;        	jz   fimPrint3
   199                              <1> ;
   200                              <1> ;			MOV	DX, uart_tx_rx
   201                              <1> ;			OUT	DX, AL		; Write the character to the UART transmit buffer
   202                              <1> ;			mov	cx, 0xff
   203                              <1> ;			call basicDelay
   204                              <1> ;
   205                              <1> ;        	inc  bx
   206                              <1> ;        	jmp  print2
   207                              <1> ;fimPrint3:   ret		
   208                              <1> 
   209                              <1> 	
   210                              <1> basicDelay:
   211 000062F6 49                  <1>         dec cx
   212 000062F7 75FD                <1>         jnz basicDelay
   213 000062F9 C3                  <1>         ret
   324                                  %include "DRVLCD20X04_8088.asm"	
     1                              <1>         CPU 8086
     2                              <1>         BITS 16
     3                              <1> LCD_CMD     EQU 0x80
     4                              <1> LCD_DATA    EQU 0x81
     5                              <1> ;// commands
     6                              <1> LCD_CLEARDISPLAY   EQU 0x01
     7                              <1> LCD_RETURNHOME     EQU 0x02
     8                              <1> LCD_ENTRYMODESET   EQU 0x04
     9                              <1> LCD_DISPLAYCONTROL EQU 0x08
    10                              <1> LCD_CURSORSHIFT    EQU 0x10
    11                              <1> LCD_FUNCTIONSET    EQU 0x20
    12                              <1> LCD_SETCGRAMADDR   EQU 0x40
    13                              <1> LCD_SETDDRAMADDR   EQU 0x80
    14                              <1> 
    15                              <1> printAL:
    16 000062FA E681                <1>         out LCD_DATA, al
    17 000062FC B90016              <1>         mov cx, 0x1600
    18 000062FF E8F4FF              <1>         call basicDelay
    19 00006302 C3                  <1>         ret
    20                              <1> 
    21                              <1> printAX:
    22 00006303 E681                <1>         out LCD_DATA, al
    23 00006305 B90016              <1>         mov cx, 0x1600
    24 00006308 E8EBFF              <1>         call basicDelay
    25 0000630B 88E0                <1>         mov al,ah
    26 0000630D BA8100              <1>         mov  dx,LCD_DATA
    27 00006310 EE                  <1>         out dx, al
    28 00006311 B90016              <1>         mov cx, 0x1600
    29 00006314 E8DFFF              <1>         call basicDelay
    30 00006317 C3                  <1>         ret
    31                              <1> 
    32                              <1> printstr:
    33 00006318 3E8A07              <1>         mov al,byte ds:[bx]
    34 0000631B 3C00                <1>         cmp al,0h
    35 0000631D 7406                <1>         jz  fim
    36 0000631F E8D8FF              <1>         call printAL
    37 00006322 43                  <1>         inc bx
    38 00006323 EBF3                <1>         jmp printstr
    39 00006325 C3                  <1> fim:    ret
    40                              <1> 
    41                              <1> setCursor:
    42 00006326 50                  <1>         push AX
    43 00006327 30E4                <1>         xor  ah,ah            ; limpa AH
    44 00006329 BB[5700]            <1>         mov  bx, row          ; pega o endereço do array
    45 0000632C 01D8                <1>         add  ax,bx            ; soma com o endereco com AL 1000+1 = 1001=40
    46 0000632E 89C3                <1>         mov  bx, ax           ; poe o 1001 no bx
    47 00006330 3E8A07              <1>         mov  al, byte ds:[bx] ; bl = 40 lido da memoria 1001 em bx
    48 00006333 88C3                <1>         mov  bl, al
    49 00006335 58                  <1>         pop  AX               ; resgata AH
    50 00006336 88D8                <1>         mov  al, bl
    51 00006338 00E0                <1>         add  al, ah
    52 0000633A 0C80                <1>         or   al, LCD_SETDDRAMADDR ;| ( ah + al)
    53 0000633C E680                <1>         out LCD_CMD, al
    54 0000633E B90016              <1>         mov cx, 0x1600
    55 00006341 E8B2FF              <1>         call basicDelay
    56                              <1> 
    57 00006344 C3                  <1>         ret
    58                              <1> setCursor2:
    59 00006345 B01D                <1>         mov  al, 29
    60 00006347 0C80                <1>         or   al, LCD_SETDDRAMADDR ;| ( ah + al)
    61 00006349 E680                <1>         out LCD_CMD, al
    62 0000634B B90016              <1>         mov cx, 0x1600
    63 0000634E E8A5FF              <1>         call basicDelay
    64 00006351 C3                  <1>         ret
    65                              <1> 
    66                              <1> lcdInit:
    67 00006352 B90048              <1>         mov cx, 0x4800
    68 00006355 E89EFF              <1>         call basicDelay
    69                              <1> 
    70 00006358 B030                <1>         mov al, 0x30
    71 0000635A E680                <1>         out LCD_CMD, al
    72                              <1> 
    73 0000635C B90008              <1>         mov cx, 0x0800
    74 0000635F E894FF              <1>         call basicDelay
    75                              <1> 
    76 00006362 B030                <1>         mov al, 0x30
    77 00006364 E680                <1>         out LCD_CMD, al
    78                              <1> 
    79 00006366 B96001              <1>         mov cx, 0x0160
    80 00006369 E88AFF              <1>         call basicDelay
    81                              <1> 
    82 0000636C B038                <1>         mov al, 0x38    ; function set
    83 0000636E E680                <1>         out LCD_CMD, al
    84                              <1> 
    85 00006370 B90016              <1>         mov cx, 0x1600
    86 00006373 E880FF              <1>         call basicDelay
    87                              <1> 
    88 00006376 B008                <1>         mov al, 0x08    ; display off
    89 00006378 E680                <1>         out LCD_CMD, al
    90                              <1> 
    91 0000637A B90016              <1>         mov cx, 0x1600
    92 0000637D E876FF              <1>         call basicDelay
    93                              <1> 
    94 00006380 B001                <1>         mov al, 0x01    ; clear display
    95 00006382 E680                <1>         out LCD_CMD, al
    96                              <1> 
    97 00006384 B90016              <1>         mov cx, 0x1600
    98 00006387 E86CFF              <1>         call basicDelay
    99                              <1> 
   100 0000638A B002                <1>         mov al, 0x02    ; return home
   101 0000638C E680                <1>         out LCD_CMD, al
   102                              <1> 
   103 0000638E B90016              <1>         mov cx, 0x1600
   104 00006391 E862FF              <1>         call basicDelay
   105                              <1> 
   106 00006394 B006                <1>         mov al, 0x06    ; entry mode set
   107 00006396 E680                <1>         out LCD_CMD, al
   108                              <1> 
   109 00006398 B90016              <1>         mov cx, 0x1600
   110 0000639B E858FF              <1>         call basicDelay
   111                              <1> 
   112 0000639E B00C                <1>         mov al, 0x0c    ; display on, no cursor
   113 000063A0 E680                <1>         out LCD_CMD, al
   114                              <1> 
   115 000063A2 B90016              <1>         mov cx, 0x1600
   116 000063A5 E84EFF              <1>         call basicDelay
   117 000063A8 C3                  <1>         ret
   118                              <1> 
   325                                  ;%include "serial1.inc"	
   326                                  ;%include "serial2.inc"	
   327                                  ;%include "errno.inc"	
   328                                  ;%include "messages.inc"	
   329                                  %include "screen.asm"	
     1                              <1> 
     2 000063A9 1B5B324A00          <1> cls     db 0x1B,"[2J",0
     3 000063AE 1B5B213B214800      <1> curpos  db 0x1B,"[!;!H",0
     4                              <1> 
     5                              <1> ;=====================
     6                              <1> ; ESC [ 2 J
     7                              <1> ;
     8                              <1> scr_clear:
     9 000063B5 BB[A963]            <1>         mov	bx, cls
    10 000063B8 E81BFF              <1>         call print2	
    11 000063BB C3                  <1>         ret
    12                              <1> ;=====================
    13                              <1> ; ESC [ Pl ; Pc H
    14                              <1> ; input:
    15                              <1> ;	dh = y position
    16                              <1> ; 	dl = x position
    17                              <1> ; MARK: scr_goto
    18                              <1> scr_goto:
    19 000063BC 1E                  <1>         push DS
    20 000063BD B80000              <1>         mov AX, 0x0
    21 000063C0 8ED8                <1>         mov DS, AX
    22 000063C2 89C3                <1>         mov bx, AX
    23 000063C4 3EC6071B            <1>         mov byte ds:[bx],0x1B
    24 000063C8 43                  <1>         inc bx
    25 000063C9 3EC6075B            <1>         mov byte ds:[bx],'['
    26 000063CD 43                  <1>         inc bx
    27 000063CE 3EC6070A            <1>         mov byte ds:[bx],10
    28 000063D2 43                  <1>         inc bx
    29 000063D3 3EC6073B            <1>         mov byte ds:[bx],';'
    30 000063D7 43                  <1>         inc bx
    31 000063D8 3EC6070A            <1>         mov byte ds:[bx],10
    32 000063DC 43                  <1>         inc bx
    33 000063DD 3EC60748            <1>         mov byte ds:[bx],'H'  
    34 000063E1 43                  <1>         inc bx
    35 000063E2 3EC60700            <1>         mov byte ds:[bx],0x0
    36                              <1> 
    37                              <1> 
    38 000063E6 B80000              <1>         mov AX, 0x0
    39 000063E9 89C3                <1>         mov bx, AX
    40 000063EB E8E8FE              <1>         call print2
    41 000063EE 1F                  <1>         POP DS
    42 000063EF C3                  <1> 		ret
    43                              <1> 
    44                              <1> 
   330                                  
   331 000063F0 FF<rep 1C00h>                   setloc	0FFF0h			; Power-On Entry Point
   331          ******************       warning: Inserting 7168 bytes [-w+user]
   332                                  reset:
   333 00007FF0 EA[9360]00F0                    jmp 0xF000:init
   334                                  
   335                                          setloc	0FFF5h			; ROM Date in ASCII
   336 00007FF5 32322F31302F3234                db	DATE			; BIOS release date MM/DD/YY
   337 00007FFD 20                              db	20h
   338                                  
   339                                          setloc	0FFFEh			; System Model byte
   340 00007FFE FE                              db	MODEL_BYTE
   341 00007FFF FF                              db	0ffh
