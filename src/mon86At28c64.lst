     1                                          CPU 8086
     2                                          BITS 16
     3                                  
     4                                  %imacro setloc  1.nolist
     5                                  %assign pad_bytes (%1-($-$$)-START)
     6                                  %if pad_bytes < 0
     7                                  %assign over_bytes -pad_bytes
     8                                  %error Preceding code extends beyond setloc location by over_bytes bytes
     9                                  %endif
    10                                  %if pad_bytes > 0
    11                                  %warning Inserting pad_bytes bytes
    12                                   times  pad_bytes db 0FFh
    13                                  %endif
    14                                  %endm
    15                                  
    16                                  
    17                                  %define	START		0E000h		; BIOS starts at offset 08000h
    18                                  %define DATE		'22/10/24'
    19                                  %define MODEL_BYTE	0FEh		; IBM PC/XT
    20                                  
    21                                  bioscseg	equ	0F000h
    22                                  biosdseg	equ	0040h
    23                                  LCD_CMD     EQU 0x80
    24                                  LCD_DATA    EQU 0x81
    25                                  ;// commands
    26                                  LCD_CLEARDISPLAY   EQU 0x01
    27                                  LCD_RETURNHOME     EQU 0x02
    28                                  LCD_ENTRYMODESET   EQU 0x04
    29                                  LCD_DISPLAYCONTROL EQU 0x08
    30                                  LCD_CURSORSHIFT    EQU 0x10
    31                                  LCD_FUNCTIONSET    EQU 0x20
    32                                  LCD_SETCGRAMADDR   EQU 0x40
    33                                  LCD_SETDDRAMADDR   EQU 0x80
    34                                  
    35                                  
    36                                          org	START
    37                                  
    38 00000000 E9B500                  init:   jmp     init2
    39                                             ;12345678901234567890
    40 00000003 38303838202D204350-     msg0:   db "8088 - CPU TXM/8 III",0
    40 0000000C 552054584D2F382049-
    40 00000015 494900             
    41 00000018 5061756C6F2053696C-     msg1:	db "Paulo Silva  (c)2024",0
    41 00000021 766120202863293230-
    41 0000002A 323400             
    42 0000002D 4D6F6E383620562031-     msg2:   db "Mon86 V 1.0.00 2410A",0
    42 00000036 2E302E303020323431-
    42 0000003F 304100             
    43 00000042 314D42206472616D20-     msg3:   db "1MB dram rom at28c64",0
    43 0000004B 726F6D206174323863-
    43 00000054 363400             
    44 00000057 0028145450              row:    db 0, 40, 20, 84, 80
    45                                  
    46 0000005C 38303838202D204350-     msg10:  db "8088 - CPU TXM/8 III",13,10,0
    46 00000065 552054584D2F382049-
    46 0000006E 49490D0A00         
    47 00000073 5061756C6F2053696C-     msg11:	db "Paulo Silva  (c)2024",13,10,0
    47 0000007C 766120202863293230-
    47 00000085 32340D0A00         
    48 0000008A 4D6F6E383620562031-     msg12:  db "Mon86 V 1.0.00 2410A",13,10,0
    48 00000093 2E302E303020323431-
    48 0000009C 30410D0A00         
    49 000000A1 314D42206472616D20-     msg13:  db "1MB dram rom at28c64",13,10,0
    49 000000AA 726F6D206174323863-
    49 000000B3 36340D0A00         
    50                                  
    51                                  init2:
    52 000000B8 FA                              cli				; disable interrupts
    53 000000B9 FC                              cld				; clear direction flag
    54 000000BA B80070                          mov ax, 0x7000
    55 000000BD 8ED0                            mov ss, ax
    56 000000BF B800F0                          mov ax, 0xF000
    57 000000C2 8ED8                            mov ds, ax
    58 000000C4 31E4                            xor sp, sp
    59 000000C6 8EC4                            mov es, sp
    60 000000C8 E8D900                          call lcdInit
    61                                  
    62 000000CB B400                            mov ah, 0
    63 000000CD B000                            mov al, 0
    64 000000CF E8A600                          call setCursor
    65 000000D2 BB[0300]                        mov	bx,msg0
    66 000000D5 E86300                          call printstr
    67                                  
    68 000000D8 B400                            mov ah, 0
    69 000000DA B001                            mov al, 1
    70 000000DC E89900                          call setCursor
    71 000000DF BB[1800]                        mov	bx,msg1
    72 000000E2 E85600                          call printstr
    73                                  
    74 000000E5 B400                            mov ah, 0
    75 000000E7 B002                            mov al, 2
    76 000000E9 E88C00                          call setCursor
    77 000000EC BB[2D00]                        mov	bx,msg2
    78 000000EF E84900                          call printstr
    79                                  
    80 000000F2 B400                            mov ah, 0
    81 000000F4 B003                            mov al, 3
    82 000000F6 E87F00                          call setCursor
    83 000000F9 BB[4200]                        mov	bx,msg3
    84 000000FC E83C00                          call printstr
    85                                  
    86 000000FF E81801                          call configure_uart
    87                                  
    88 00000102 BB[5C00]                        mov	bx,msg10
    89 00000105 E87501                          call print
    90                                  
    91 00000108 BB[7300]                        mov	bx,msg11
    92 0000010B E86F01                          call print
    93                                  
    94 0000010E BB[8A00]                        mov	bx,msg12
    95 00000111 E86901                          call print
    96                                  
    97 00000114 BB[A100]                        mov	bx,msg13
    98 00000117 E86301                          call print
    99                                  
   100                                  loop:
   101 0000011A EBFE                            jmp loop
   102 0000011C C3                              ret
   103                                  
   104                                  printAL:
   105 0000011D E681                            out LCD_DATA, al
   106 0000011F B90016                          mov cx, 0x1600
   107 00000122 E8D600                          call basicDelay
   108 00000125 C3                              ret
   109                                  
   110                                  printAX:
   111 00000126 E681                            out LCD_DATA, al
   112 00000128 B90016                          mov cx, 0x1600
   113 0000012B E8CD00                          call basicDelay
   114 0000012E 88E0                            mov al,ah
   115 00000130 BA8100                          mov  dx,LCD_DATA
   116 00000133 EE                              out dx, al
   117 00000134 B90016                          mov cx, 0x1600
   118 00000137 E8C100                          call basicDelay
   119 0000013A C3                              ret
   120                                  
   121                                  printstr:
   122 0000013B 3E8A07                          mov al,byte ds:[bx]
   123 0000013E 3C00                            cmp al,0h
   124 00000140 7406                            jz  fim
   125 00000142 E8D8FF                          call printAL
   126 00000145 43                              inc bx
   127 00000146 EBF3                            jmp printstr
   128 00000148 C3                      fim:    ret
   129                                  
   130                                  writeRam:
   131 00000149 50                              push AX
   132 0000014A B80000                          mov AX, 0h
   133 0000014D 8ED8                            mov DS, AX
   134 0000014F 58                              pop AX
   135 00000150 A30000                          mov [0h], AX
   136 00000153 C3                              ret
   137                                  readRam:
   138 00000154 B80000                          mov AX, 0h
   139 00000157 8ED8                            mov DS, AX
   140 00000159 A10000                          mov AX,[0h]
   141 0000015C C3                              ret
   142                                  ;byte_to_hex_str
   143                                  ;This function return in AX the ascii code for hexadecimal number from 0 to F
   144                                  ;Parameters:
   145                                  ;               AL = imput
   146                                  ;               AX = output
   147                                  ;Changes CL
   148                                  byte_to_hex_str:
   149 0000015D 88C4                            mov ah, al
   150 0000015F B104                            mov cl, 4
   151 00000161 D2E8                            shr al, cl
   152 00000163 250F0F                          and ax, 0x0f0f
   153 00000166 3C09                            cmp al, 0x09
   154 00000168 7602                            jbe .1
   155 0000016A 0407                            add al, 'A' - '0' - 10
   156                                  .1:
   157 0000016C 80FC09                          cmp ah, 0x09
   158 0000016F 7603                            jbe .2
   159 00000171 80C407                          add ah, 'A' - '0' - 10
   160                                  .2:
   161 00000174 053030                          add ax, "00"
   162                                  .ret:
   163 00000177 C3                              ret
   164                                  
   165                                  setCursor:
   166 00000178 50                              push AX
   167 00000179 30E4                            xor  ah,ah            ; limpa AH
   168 0000017B BB[5700]                        mov  bx, row          ; pega o endereço do array
   169 0000017E 01D8                            add  ax,bx            ; soma com o endereco com AL 1000+1 = 1001=40
   170 00000180 89C3                            mov  bx, ax           ; poe o 1001 no bx
   171 00000182 3E8A07                          mov  al, byte ds:[bx] ; bl = 40 lido da memoria 1001 em bx
   172 00000185 88C3                            mov  bl, al
   173 00000187 58                              pop  AX               ; resgata AH
   174 00000188 88D8                            mov  al, bl
   175 0000018A 00E0                            add  al, ah
   176 0000018C 0C80                            or   al, LCD_SETDDRAMADDR ;| ( ah + al)
   177 0000018E E680                            out LCD_CMD, al
   178 00000190 B90016                          mov cx, 0x1600
   179 00000193 E86500                          call basicDelay
   180                                  
   181 00000196 C3                              ret
   182                                  setCursor2:
   183 00000197 B01D                            mov  al, 29
   184 00000199 0C80                            or   al, LCD_SETDDRAMADDR ;| ( ah + al)
   185 0000019B E680                            out LCD_CMD, al
   186 0000019D B90016                          mov cx, 0x1600
   187 000001A0 E85800                          call basicDelay
   188 000001A3 C3                              ret
   189                                  
   190                                  lcdInit:
   191 000001A4 B90048                          mov cx, 0x4800
   192 000001A7 E85100                          call basicDelay
   193                                  
   194 000001AA B030                            mov al, 0x30
   195 000001AC E680                            out LCD_CMD, al
   196                                  
   197 000001AE B90008                          mov cx, 0x0800
   198 000001B1 E84700                          call basicDelay
   199                                  
   200 000001B4 B030                            mov al, 0x30
   201 000001B6 E680                            out LCD_CMD, al
   202                                  
   203 000001B8 B96001                          mov cx, 0x0160
   204 000001BB E83D00                          call basicDelay
   205                                  
   206 000001BE B038                            mov al, 0x38    ; function set
   207 000001C0 E680                            out LCD_CMD, al
   208                                  
   209 000001C2 B90016                          mov cx, 0x1600
   210 000001C5 E83300                          call basicDelay
   211                                  
   212 000001C8 B008                            mov al, 0x08    ; display off
   213 000001CA E680                            out LCD_CMD, al
   214                                  
   215 000001CC B90016                          mov cx, 0x1600
   216 000001CF E82900                          call basicDelay
   217                                  
   218 000001D2 B001                            mov al, 0x01    ; clear display
   219 000001D4 E680                            out LCD_CMD, al
   220                                  
   221 000001D6 B90016                          mov cx, 0x1600
   222 000001D9 E81F00                          call basicDelay
   223                                  
   224 000001DC B002                            mov al, 0x02    ; return home
   225 000001DE E680                            out LCD_CMD, al
   226                                  
   227 000001E0 B90016                          mov cx, 0x1600
   228 000001E3 E81500                          call basicDelay
   229                                  
   230 000001E6 B006                            mov al, 0x06    ; entry mode set
   231 000001E8 E680                            out LCD_CMD, al
   232                                  
   233 000001EA B90016                          mov cx, 0x1600
   234 000001ED E80B00                          call basicDelay
   235                                  
   236 000001F0 B00C                            mov al, 0x0c    ; display on, no cursor
   237 000001F2 E680                            out LCD_CMD, al
   238                                  
   239 000001F4 B90016                          mov cx, 0x1600
   240 000001F7 E80100                          call basicDelay
   241 000001FA C3                              ret
   242                                  
   243                                  basicDelay:
   244 000001FB 49                              dec cx
   245 000001FC 75FD                            jnz basicDelay
   246 000001FE C3                              ret
   247                                  
   248                                  %include "DRV16C550_8088.asm"		
     1                              <1>         CPU 8086
     2                              <1>         BITS 16
     3                              <1> 
     4                              <1> ; Port
     5 000001FF F803                <1> COM1:	DW		0x3F8
     6                              <1> ; Here are the port numbers for various UART registers:
     7                              <1> uart_tx_rx 		EQU  0xf8 ; 0 DLAB = 0 for Regs. TX and RX
     8                              <1> uart_DLL 		EQU  0xf8 ; 0 DLAB = 1 Divisor lacth low
     9                              <1> uart_IER 		EQU  0xf9 ; 1 DLAB = 0 Interrupt Enable Register
    10                              <1> uart_DLH 		EQU  0xf9 ; 1 DLAB = 1 Divisor lacth high
    11                              <1> uart_ISR 		EQU  0xfa ; 2 IIR Interrupt Ident. Register READ ONLY
    12                              <1> uart_FCR 		EQU  0xfa ; 2 Fifo Control Resgister WRITE ONLY
    13                              <1> uart_LCR 		EQU  0xfb ; 3 Line Control Register
    14                              <1> uart_MCR 		EQU  0xfc ; 4 Modem Control Register
    15                              <1> uart_LSR 		EQU  0xfd ; 5 Line Status Register
    16                              <1> uart_MSR 		EQU  0xfe ; 6 Modem Status Register
    17                              <1> uart_scratch 	EQU  0xff ; 7 SCR Scratch Register
    18                              <1> 
    19                              <1> UART_FREQUENCY		equ 4915000
    20                              <1> ;Fomula UART_FREQUENCY/(  9600 * 16)
    21                              <1> ;Baudrates
    22                              <1> UART_BAUD_9600		EQU 32
    23                              <1> UART_BAUD_19200		EQU 16
    24                              <1> UART_BAUD_38400		EQU  8
    25                              <1> UART_BAUD_56800		EQU  5
    26                              <1> UART_BAUD_115200	EQU  3
    27                              <1> UART_BAUD_230400	EQU  1
    28                              <1> 
    29                              <1> UART_TX_WAIT		EQU	0x7fff		; Count before a TX times out
    30                              <1> 
    31 00000201 53657269616C206472- <1> msg0_01:   db "Serial driver for 16C550",0
    31 0000020A 6976657220666F7220- <1>
    31 00000213 31364335353000      <1>
    32                              <1> ;configure_uart
    33                              <1> ;Parameters:None
    34                              <1> ;			
    35                              <1> ;			
    36                              <1> configure_uart:
    37 0000021A B9FF2F              <1> 			mov cx, 0x2fff
    38 0000021D E8DBFF              <1> 			call	basicDelay
    39 00000220 B000                <1> 			MOV		AL,0x0	 		;
    40 00000222 E6F9                <1> 			OUT  	uart_IER,	AL	; Disable interrupts
    41                              <1> 
    42 00000224 B91F00              <1> 			mov cx, 0x1f
    43 00000227 E8D1FF              <1> 			call	basicDelay
    44                              <1> 
    45 0000022A B080                <1> 			MOV		AL, 0x80			;
    46 0000022C E6FB                <1> 			OUT     uart_LCR,	AL 	; Turn DLAB on
    47 0000022E B91F00              <1> 			mov cx, 0x1f
    48 00000231 E8C7FF              <1> 			call	basicDelay
    49                              <1> 
    50 00000234 B008                <1> 			MOV		AL, UART_BAUD_38400 ;0x08
    51 00000236 E6F8                <1> 			OUT     uart_DLL,   AL	; Set divisor low
    52 00000238 B91F00              <1> 			mov cx, 0x1f
    53 0000023B E8BDFF              <1> 			call	basicDelay
    54                              <1> 
    55 0000023E B000                <1> 			MOV		AL, 0x00		;
    56 00000240 E6F9                <1> 			OUT     uart_DLH,	AL	; Set divisor high
    57 00000242 B91F00              <1> 			mov cx, 0x1f
    58 00000245 E8B3FF              <1> 			call	basicDelay
    59                              <1> 
    60 00000248 B003                <1> 			MOV     AL, 0x03	; AH	
    61 0000024A E6FB                <1> 			OUT     uart_LCR,	AL	; Write out flow control bits 8,1,N
    62 0000024C B91F00              <1> 			mov cx, 0x1f
    63 0000024F E8A9FF              <1> 			call	basicDelay
    64                              <1> 
    65 00000252 B081                <1> 			MOV 	AL,0x81			;
    66 00000254 E6FA                <1> 			OUT     uart_ISR,	AL	; Turn on FIFO, with trigger level of 8.
    67                              <1> 								                ; This turn on the 16bytes buffer!
    68 00000256 C3                  <1> 			RET
    69                              <1> ;UART_RX:
    70                              <1> ;Parameters: 
    71                              <1> ;			AL = return the available character
    72                              <1> ;			If al returns with a valid char flag carry is set, otherwise
    73                              <1> ;			flag carry is clear
    74                              <1> UART_RX:	
    75 00000257 E4FD                <1> 			IN	AL, uart_LSR	 		; Get the line status register
    76 00000259 2401                <1> 			AND AL, 0x01		; Check for characters in buffer
    77 0000025B F8                  <1> 			CLC 				; Clear carry
    78 0000025C 7403                <1> 			JZ	END				; Just ret (with carry clear) if no characters
    79 0000025E E4F8                <1> 			IN	AL,uart_tx_rx	; Read the character from the UART receive buffer
    80 00000260 F9                  <1> 			STC 				; Set the carry flag
    81                              <1> END:			
    82 00000261 C3                  <1> 			RET
    83                              <1> 
    84                              <1> UART_TX:
    85 00000262 50                  <1> 			PUSH AX
    86 00000263 BBFF7F              <1> 			MOV BX, UART_TX_WAIT			; Set CB to the transmit timeout
    87                              <1> LOOP_UART_TX:
    88 00000266 E4FD                <1> 			IN	AL,	uart_LSR		; Get the line status register
    89 00000268 2440                <1> 			AND AL, 0x40					; Check for TX empty
    90 0000026A 7506                <1> 			JNZ	OUT_UART_TX				; If set, then TX is empty, goto transmit
    91 0000026C 4B                  <1> 			DEC	BX
    92 0000026D 75F7                <1> 			JNZ LOOP_UART_TX		; Otherwise loop
    93 0000026F 58                  <1> 			POP	AX							; We've timed out at this point so
    94 00000270 F8                  <1> 			CLC							; Clear the carry flag and preserve A
    95 00000271 C3                  <1> 			RET
    96                              <1> OUT_UART_TX:
    97 00000272 58                  <1> 			POP	AX							; Good to send at this point, so		
    98 00000273 E6F8                <1> 			OUT	uart_tx_rx,AL			; Write the character to the UART transmit buffer
    99 00000275 B9FF01              <1> 			mov cx, 0x1ff
   100 00000278 E880FF              <1> 			call	basicDelay
   101 0000027B F9                  <1> 			STC						; Set carry flag
   102 0000027C C3                  <1> 			RET
   103                              <1> ;print
   104                              <1> ;parameters:
   105                              <1> ;          bx = message address
   106                              <1> ;
   107                              <1> print:
   108 0000027D 3E8A07              <1>         	mov  al,byte ds:[bx]
   109 00000280 3C00                <1>         	cmp  al,0h
   110 00000282 740B                <1>         	jz   fimPrint
   111 00000284 E6F8                <1>         	OUT	uart_tx_rx,AL
   112 00000286 B9FF27              <1> 			mov	cx, 0x27ff
   113 00000289 E86FFF              <1> 			call basicDelay
   114 0000028C 43                  <1>         	inc  bx
   115 0000028D EBEE                <1>         	jmp  print
   116 0000028F C3                  <1> fimPrint:   ret
   117                              <1> 
   118                              <1> 		
   119                              <1> 
   120                              <1> serialLoop:
   121 00000290 B043                <1> 			mov	al,'C'
   122 00000292 E8CDFF              <1> 			call UART_TX
   123                              <1> ;			mov	cx, 0xff
   124                              <1> ;			call basicDelay
   125 00000295 EBF9                <1> 			jmp serialLoop
   126                              <1> 
   127 00000297 C3                  <1> 			ret
   128                              <1> 	
   129                              <1> 
   249                                  
   250 00000298 FF<rep 1D58h>                   setloc	0FFF0h			; Power-On Entry Point
   250          ******************       warning: Inserting 7512 bytes [-w+user]
   251                                  reset:
   252 00001FF0 EA[0000]00F0                    jmp 0xF000:init
   253                                  
   254                                          setloc	0FFF5h			; ROM Date in ASCII
   255 00001FF5 32322F31302F3234                db	DATE			; BIOS release date MM/DD/YY
   256 00001FFD 20                              db	20h
   257                                  
   258                                          setloc	0FFFEh			; System Model byte
   259 00001FFE FE                              db	MODEL_BYTE
   260 00001FFF FF                              db	0ffh
