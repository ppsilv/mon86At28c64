     1                                          CPU 8086
     2                                          BITS 16
     3                                  
     4                                  %imacro setloc  1.nolist
     5                                  %assign pad_bytes (%1-($-$$)-START)
     6                                  %if pad_bytes < 0
     7                                  %assign over_bytes -pad_bytes
     8                                  %error Preceding code extends beyond setloc location by over_bytes bytes
     9                                  %endif
    10                                  %if pad_bytes > 0
    11                                  %warning Inserting pad_bytes bytes
    12                                   times  pad_bytes db 0FFh
    13                                  %endif
    14                                  %endm
    15                                  
    16                                  
    17                                  %define	START		0E000h		; BIOS starts at offset 08000h
    18                                  %define DATE		'22/10/24'
    19                                  %define MODEL_BYTE	0FEh		; IBM PC/XT
    20                                  %define VERSION		'1.0.00'		; BIOS version
    21                                  
    22                                  bioscseg	equ	0F000h
    23                                  biosdseg	equ	0040h
    24                                  
    25                                  post_reg	equ	80h
    26                                  serial_timeout	equ	7Ch	; byte[4] - serial port timeout values
    27                                  equip_serial	equ	00h	; word[4] - addresses of serial ports
    28                                  unused_reg	equ	0C0h	; used for hardware detection and I/O delays
    29                                  equipment_list	equ	10h	; word - equpment list
    30                                  
    31                                          org	START
    32                                  
    33 00000000 E94501                  init:   jmp     init2
    34                                             ;12345678901234567890
    35 00000003 38303838202D204350-     msg0    db "8088 - CPU TXM/8 III",0
    35 0000000C 552054584D2F382049-
    35 00000015 494900             
    36 00000018 5061756C6F2053696C-     msg1    db "Paulo Silva  (c)2024",0
    36 00000021 766120202863293230-
    36 0000002A 323400             
    37 0000002D 4D6F6E383620562031-     msg2    db "Mon86 V 1.0.00 2410A",0
    37 00000036 2E302E303020323431-
    37 0000003F 304100             
    38 00000042 314D42206472616D20-     msg3    db "1MB dram rom at28c64",0
    38 0000004B 726F6D206174323863-
    38 00000054 363400             
    39 00000057 0028145450              row:    db 0, 40, 20, 84, 80
    40                                  
    41 0000005C 38303838202D204350-     msg10   db "8088 - CPU TXM/8 III",13,10,0
    41 00000065 552054584D2F382049-
    41 0000006E 49490D0A00         
    42 00000073 5061756C6F2053696C-     msg11   db "Paulo Silva  (c)2024",13,10,0
    42 0000007C 766120202863293230-
    42 00000085 32340D0A00         
    43 0000008A 4D6F6E383620562031-     msg12   db "Mon86 V 1.0.00 2410A",13,10,0
    43 00000093 2E302E303020323431-
    43 0000009C 30410D0A00         
    44 000000A1 314D42206472616D20-     msg13   db "1MB dram rom at28c64",13,10,0
    44 000000AA 726F6D206174323863-
    44 000000B3 36340D0A00         
    45                                  
    46 000000B8 585420383038382042-     welcome		db	"XT 8088 BIOS, Version "
    46 000000C1 494F532C2056657273-
    46 000000CA 696F6E20           
    47 000000CE 312E302E3030            		db	VERSION
    48 000000D4 2E20                    		db	". "
    49 000000D6 436F70797269676874-     		db	"Copyright (C) 2024 - 2024 Paulo Silva(pgordao)", 0Dh, 0Ah
    49 000000DF 202843292032303234-
    49 000000E8 202D20323032342050-
    49 000000F1 61756C6F2053696C76-
    49 000000FA 612870676F7264616F-
    49 00000103 290D0A             
    50 00000106 38303838202D204350-     		db	"8088 - CPU TXM/8 III  "
    50 0000010F 552054584D2F382049-
    50 00000118 49492020           
    51 0000011C 4D6F6E383620562031-     		db	"Mon86 V 1.0.00 2410A 1MB dram rom at28c64", 0Dh, 0Ah, 0
    51 00000125 2E302E303020323431-
    51 0000012E 304120314D42206472-
    51 00000137 616D20726F6D206174-
    51 00000140 32386336340D0A00   
    52                                  
    53                                  init2:
    54 00000148 FA                              cli				; disable interrupts
    55 00000149 FC                              cld				; clear direction flag
    56 0000014A B80070                          mov ax, 0x7000
    57 0000014D 8ED0                            mov ss, ax
    58 0000014F B800F0                          mov ax, 0xF000
    59 00000152 8ED8                            mov ds, ax
    60 00000154 31E4                            xor sp, sp
    61 00000156 8EC4                            mov es, sp
    62                                  
    63 00000158 E8C200                          call configure_uart
    64 0000015B BB[B800]                        mov	bx,welcome
    65 0000015E E83901                          call print
    66                                  
    67                                  
    68                                  
    69                                  loop:
    70 00000161 EBFE                            jmp loop
    71 00000163 C3                              ret
    72                                  
    73                                  lcdMessage:
    74 00000164 E8A401                          call lcdInit
    75                                  
    76 00000167 B400                            mov ah, 0
    77 00000169 B000                            mov al, 0
    78 0000016B E87101                          call setCursor
    79 0000016E BB[0300]                        mov	bx,msg0
    80 00000171 E85D01                          call printstr
    81                                  
    82 00000174 B400                            mov ah, 0
    83 00000176 B001                            mov al, 1
    84 00000178 E86401                          call setCursor
    85 0000017B BB[1800]                        mov	bx,msg1
    86 0000017E E85001                          call printstr
    87                                  
    88 00000181 B400                            mov ah, 0
    89 00000183 B002                            mov al, 2
    90 00000185 E85701                          call setCursor
    91 00000188 BB[2D00]                        mov	bx,msg2
    92 0000018B E84301                          call printstr
    93                                  
    94 0000018E B400                            mov ah, 0
    95 00000190 B003                            mov al, 3
    96 00000192 E84A01                          call setCursor
    97 00000195 BB[4200]                        mov	bx,msg3
    98 00000198 E83601                          call printstr
    99 0000019B C3                              ret
   100                                  
   101                                  writeRam:
   102 0000019C 50                              push AX
   103 0000019D B80000                          mov AX, 0h
   104 000001A0 8ED8                            mov DS, AX
   105 000001A2 58                              pop AX
   106 000001A3 A30000                          mov [0h], AX
   107 000001A6 C3                              ret
   108                                  readRam:
   109 000001A7 B80000                          mov AX, 0h
   110 000001AA 8ED8                            mov DS, AX
   111 000001AC A10000                          mov AX,[0h]
   112 000001AF C3                              ret
   113                                  ;byte_to_hex_str
   114                                  ;This function return in AX the ascii code for hexadecimal number from 0 to F
   115                                  ;Parameters:
   116                                  ;               AL = imput
   117                                  ;               AX = output
   118                                  ;Changes CL
   119                                  byte_to_hex_str:
   120 000001B0 88C4                            mov ah, al
   121 000001B2 B104                            mov cl, 4
   122 000001B4 D2E8                            shr al, cl
   123 000001B6 250F0F                          and ax, 0x0f0f
   124 000001B9 3C09                            cmp al, 0x09
   125 000001BB 7602                            jbe .1
   126 000001BD 0407                            add al, 'A' - '0' - 10
   127                                  .1:
   128 000001BF 80FC09                          cmp ah, 0x09
   129 000001C2 7603                            jbe .2
   130 000001C4 80C407                          add ah, 'A' - '0' - 10
   131                                  .2:
   132 000001C7 053030                          add ax, "00"
   133                                  .ret:
   134 000001CA C3                              ret
   135                                  
   136                                  ;=========================================================================
   137                                  ; print_digit - print hexadecimal digit
   138                                  ; Input:
   139                                  ;	AL - bits 3...0 - digit to print (0...F)
   140                                  ; Output:
   141                                  ;	none
   142                                  ;-------------------------------------------------------------------------
   143                                  print_digit:
   144 000001CB 50                      	push	ax
   145 000001CC 53                      	push	bx
   146 000001CD 240F                    	and	al,0Fh
   147 000001CF 0430                    	add	al,'0'			; convert to ASCII
   148 000001D1 3C39                    	cmp	al,'9'			; less or equal 9?
   149 000001D3 7602                    	jna	.1
   150 000001D5 0407                    	add	al,'A'-'9'-1		; a hex digit
   151                                  .1:
   152 000001D7 B40E                    	mov	ah,0Eh			; Int 10 function 0Eh - teletype output
   153 000001D9 B307                    	mov	bl,07h			; just in case we're in graphic mode
   154 000001DB CD10                    	int	10h
   155 000001DD 5B                      	pop	bx
   156 000001DE 58                      	pop	ax
   157 000001DF C3                      	ret
   158                                  
   159                                  ;=========================================================================
   160                                  ; print_hex - print 16-bit number in hexadecimal
   161                                  ; Input:
   162                                  ;	AX - number to print
   163                                  ; Output:
   164                                  ;	none
   165                                  ;-------------------------------------------------------------------------
   166                                  print_hex:
   167 000001E0 86C4                    	xchg	al,ah
   168 000001E2 E80600                  	call	print_byte		; print the upper byte
   169 000001E5 86C4                    	xchg	al,ah
   170 000001E7 E80100                  	call	print_byte		; print the lower byte
   171 000001EA C3                      	ret
   172                                  ;=========================================================================
   173                                  ; print_byte - print a byte in hexadecimal
   174                                  ; Input:
   175                                  ;	AL - byte to print
   176                                  ; Output:
   177                                  ;	none
   178                                  ;-------------------------------------------------------------------------
   179                                  print_byte:
   180 000001EB D0C0                    	rol	al,1
   181 000001ED D0C0                    	rol	al,1
   182 000001EF D0C0                    	rol	al,1
   183 000001F1 D0C0                    	rol	al,1
   184 000001F3 E8D5FF                  	call	print_digit
   185 000001F6 D0C0                    	rol	al,1
   186 000001F8 D0C0                    	rol	al,1
   187 000001FA D0C0                    	rol	al,1
   188 000001FC D0C0                    	rol	al,1
   189 000001FE E8CAFF                  	call	print_digit
   190 00000201 C3                      	ret
   191                                  
   192                                  %include "DRV16C550_8088.asm"		
     1                              <1>         CPU 8086
     2                              <1>         BITS 16
     3                              <1> 
     4                              <1> ; Port
     5 00000202 F803                <1> COM1:	DW		0x3F8
     6                              <1> ; Here are the port numbers for various UART registers:
     7                              <1> uart_tx_rx 		EQU  0x3f8 ; 0 DLAB = 0 for Regs. TX and RX
     8                              <1> uart_DLL 		EQU  0x3f8 ; 0 DLAB = 1 Divisor lacth low
     9                              <1> uart_IER 		EQU  0x3f9 ; 1 DLAB = 0 Interrupt Enable Register
    10                              <1> uart_DLH 		EQU  0x3f9 ; 1 DLAB = 1 Divisor lacth high
    11                              <1> uart_ISR 		EQU  0x3fa ; 2 IIR Interrupt Ident. Register READ ONLY
    12                              <1> uart_FCR 		EQU  0x3fa ; 2 Fifo Control Resgister WRITE ONLY
    13                              <1> uart_LCR 		EQU  0x3fb ; 3 Line Control Register
    14                              <1> uart_MCR 		EQU  0x3fc ; 4 Modem Control Register
    15                              <1> uart_LSR 		EQU  0x3fd ; 5 Line Status Register
    16                              <1> uart_MSR 		EQU  0x3fe ; 6 Modem Status Register
    17                              <1> uart_scratch 	EQU  0x3ff ; 7 SCR Scratch Register
    18                              <1> 
    19                              <1> UART_FREQUENCY		equ 4915000
    20                              <1> ;Fomula UART_FREQUENCY/(  9600 * 16)
    21                              <1> ;Baudrates
    22                              <1> UART_BAUD_9600		EQU 32
    23                              <1> UART_BAUD_19200		EQU 16
    24                              <1> UART_BAUD_38400		EQU  8
    25                              <1> UART_BAUD_56800		EQU  5
    26                              <1> UART_BAUD_115200	EQU  3
    27                              <1> UART_BAUD_230400	EQU  1
    28                              <1> 
    29                              <1> UART_TX_WAIT		EQU	0x7fff		; Count before a TX times out
    30                              <1> 
    31 00000204 53657269616C206472- <1> msg0_01:   db "Serial driver for 16C550",0
    31 0000020D 6976657220666F7220- <1>
    31 00000216 31364335353000      <1>
    32                              <1> ;configure_uart
    33                              <1> ;Parameters:None
    34                              <1> ;			
    35                              <1> ;			
    36                              <1> configure_uart:
    37 0000021D B9FF4F              <1> 			mov cx, 0x4fff
    38 00000220 E88C00              <1> 			call	basicDelay
    39 00000223 B000                <1> 			MOV		AL,0x0	 		;
    40 00000225 BAF903              <1> 			MOV		DX, uart_IER
    41 00000228 EE                  <1> 			OUT  	DX,	AL	; Disable interrupts
    42                              <1> 
    43 00000229 B91F00              <1> 			mov cx, 0x1f
    44 0000022C E88000              <1> 			call	basicDelay
    45                              <1> 
    46 0000022F B080                <1> 			MOV		AL, 0x80			;
    47 00000231 BAFB03              <1> 			MOV		DX, uart_LCR
    48 00000234 EE                  <1> 			OUT     DX,	AL 	; Turn DLAB on
    49 00000235 B91F00              <1> 			mov cx, 0x1f
    50 00000238 E87400              <1> 			call	basicDelay
    51                              <1> 
    52 0000023B B008                <1> 			MOV		AL, UART_BAUD_38400 ;0x08
    53 0000023D BAF803              <1> 			MOV		DX, uart_DLL
    54 00000240 EE                  <1> 			OUT     DX,   AL	; Set divisor low
    55 00000241 B91F00              <1> 			mov cx, 0x1f
    56 00000244 E86800              <1> 			call	basicDelay
    57                              <1> 
    58 00000247 B000                <1> 			MOV		AL, 0x00		;
    59 00000249 BAF903              <1> 			MOV		DX, uart_DLH
    60 0000024C EE                  <1> 			OUT     DX,	AL	; Set divisor high
    61 0000024D B91F00              <1> 			mov cx, 0x1f
    62 00000250 E85C00              <1> 			call	basicDelay
    63                              <1> 
    64 00000253 B003                <1> 			MOV     AL, 0x03	; AH	
    65 00000255 BAFB03              <1> 			MOV		DX, uart_LCR
    66 00000258 EE                  <1> 			OUT     DX,	AL	; Write out flow control bits 8,1,N
    67 00000259 B91F00              <1> 			mov cx, 0x1f
    68 0000025C E85000              <1> 			call	basicDelay
    69                              <1> 
    70 0000025F B081                <1> 			MOV 	AL,0x81			;
    71 00000261 BAFA03              <1> 			MOV		DX, uart_ISR
    72 00000264 EE                  <1> 			OUT     DX,	AL	; Turn on FIFO, with trigger level of 8.
    73                              <1> 								                ; This turn on the 16bytes buffer!
    74 00000265 C3                  <1> 			RET
    75                              <1> ;UART_RX:
    76                              <1> ;Parameters: 
    77                              <1> ;			AL = return the available character
    78                              <1> ;			If al returns with a valid char flag carry is set, otherwise
    79                              <1> ;			flag carry is clear
    80                              <1> UART_RX:	
    81 00000266 BAFD03              <1> 			MOV DX, uart_LSR
    82 00000269 EC                  <1> 			IN	AL, DX	 		; Get the line status register
    83 0000026A 2401                <1> 			AND AL, 0x01		; Check for characters in buffer
    84 0000026C F8                  <1> 			CLC 				; Clear carry
    85 0000026D 7405                <1> 			JZ	END				; Just ret (with carry clear) if no characters
    86 0000026F BAF803              <1> 			MOV DX, uart_tx_rx
    87 00000272 EC                  <1> 			IN	AL, DX			; Read the character from the UART receive buffer
    88 00000273 F9                  <1> 			STC 				; Set the carry flag
    89                              <1> END:			
    90 00000274 C3                  <1> 			RET
    91                              <1> 
    92                              <1> UART_TX:
    93 00000275 50                  <1> 			PUSH AX
    94 00000276 BBFF7F              <1> 			MOV BX, UART_TX_WAIT	; Set CB to the transmit timeout
    95                              <1> LOOP_UART_TX:
    96 00000279 BAFD03              <1> 			MOV DX, uart_LSR
    97 0000027C EC                  <1> 			IN	AL,	DX 				; Get the line status register
    98 0000027D 2460                <1> 			AND AL, 0x60			; Check for TX empty
    99 0000027F 750C                <1> 			JNZ	OUT_UART_TX			; If set, then TX is empty, goto transmit
   100 00000281 B9FF17              <1> 			mov	cx, 0x17ff
   101 00000284 E82800              <1> 			call basicDelay
   102 00000287 4B                  <1> 			DEC	BX
   103 00000288 75EF                <1> 			JNZ LOOP_UART_TX		; Otherwise loop
   104 0000028A 58                  <1> 			POP	AX					; We've timed out at this point so
   105 0000028B F8                  <1> 			CLC						; Clear the carry flag and preserve AX
   106 0000028C C3                  <1> 			RET
   107                              <1> OUT_UART_TX:
   108 0000028D 58                  <1> 			POP	AX					; Good to send at this point, so		
   109 0000028E BAF803              <1> 			MOV	DX, uart_tx_rx
   110 00000291 EE                  <1> 			OUT	DX, AL		; Write the character to the UART transmit buffer
   111 00000292 B9FF17              <1> 			mov	cx, 0x17ff
   112 00000295 E81700              <1> 			call basicDelay
   113 00000298 F9                  <1> 			STC						; Set carry flag
   114 00000299 C3                  <1> 			RET
   115                              <1> ;print
   116                              <1> ;parameters:
   117                              <1> ;          bx = message address
   118                              <1> ;
   119                              <1> print:
   120 0000029A 3E8A07              <1>         	mov  al,byte ds:[bx]
   121 0000029D 3C00                <1>         	cmp  al,0h
   122 0000029F 740D                <1>         	jz   fimPrint
   123                              <1> 
   124 000002A1 BAF803              <1> 			MOV	DX, uart_tx_rx
   125 000002A4 EE                  <1>         	OUT	DX, AL
   126 000002A5 B9FF00              <1> 			mov	cx, 0xff
   127 000002A8 E80400              <1> 			call basicDelay
   128                              <1> 
   129                              <1> cont:
   130 000002AB 43                  <1>         	inc  bx
   131 000002AC EBEC                <1>         	jmp  print
   132 000002AE C3                  <1> fimPrint:   ret
   133                              <1> 
   134                              <1> 		
   135                              <1> 
   136                              <1> ;;serialLoop:
   137                              <1> ;;			mov	al,'C'
   138                              <1> ;;        	OUT	uart_tx_rx,AL
   139                              <1> ;;			mov	cx, 0xff
   140                              <1> ;;			call basicDelay
   141                              <1> ;;			jmp serialLoop
   142                              <1> ;;
   143                              <1> ;;			ret
   144                              <1> 	
   145                              <1> basicDelay:
   146 000002AF 49                  <1>         dec cx
   147 000002B0 75FD                <1>         jnz basicDelay
   148 000002B2 C3                  <1>         ret
   193                                  %include "DRVLCD20X04_8088.asm"	
     1                              <1>         CPU 8086
     2                              <1>         BITS 16
     3                              <1> LCD_CMD     EQU 0x80
     4                              <1> LCD_DATA    EQU 0x81
     5                              <1> ;// commands
     6                              <1> LCD_CLEARDISPLAY   EQU 0x01
     7                              <1> LCD_RETURNHOME     EQU 0x02
     8                              <1> LCD_ENTRYMODESET   EQU 0x04
     9                              <1> LCD_DISPLAYCONTROL EQU 0x08
    10                              <1> LCD_CURSORSHIFT    EQU 0x10
    11                              <1> LCD_FUNCTIONSET    EQU 0x20
    12                              <1> LCD_SETCGRAMADDR   EQU 0x40
    13                              <1> LCD_SETDDRAMADDR   EQU 0x80
    14                              <1> 
    15                              <1> printAL:
    16 000002B3 E681                <1>         out LCD_DATA, al
    17 000002B5 B90016              <1>         mov cx, 0x1600
    18 000002B8 E8F4FF              <1>         call basicDelay
    19 000002BB C3                  <1>         ret
    20                              <1> 
    21                              <1> printAX:
    22 000002BC E681                <1>         out LCD_DATA, al
    23 000002BE B90016              <1>         mov cx, 0x1600
    24 000002C1 E8EBFF              <1>         call basicDelay
    25 000002C4 88E0                <1>         mov al,ah
    26 000002C6 BA8100              <1>         mov  dx,LCD_DATA
    27 000002C9 EE                  <1>         out dx, al
    28 000002CA B90016              <1>         mov cx, 0x1600
    29 000002CD E8DFFF              <1>         call basicDelay
    30 000002D0 C3                  <1>         ret
    31                              <1> 
    32                              <1> printstr:
    33 000002D1 3E8A07              <1>         mov al,byte ds:[bx]
    34 000002D4 3C00                <1>         cmp al,0h
    35 000002D6 7406                <1>         jz  fim
    36 000002D8 E8D8FF              <1>         call printAL
    37 000002DB 43                  <1>         inc bx
    38 000002DC EBF3                <1>         jmp printstr
    39 000002DE C3                  <1> fim:    ret
    40                              <1> 
    41                              <1> setCursor:
    42 000002DF 50                  <1>         push AX
    43 000002E0 30E4                <1>         xor  ah,ah            ; limpa AH
    44 000002E2 BB[5700]            <1>         mov  bx, row          ; pega o endereço do array
    45 000002E5 01D8                <1>         add  ax,bx            ; soma com o endereco com AL 1000+1 = 1001=40
    46 000002E7 89C3                <1>         mov  bx, ax           ; poe o 1001 no bx
    47 000002E9 3E8A07              <1>         mov  al, byte ds:[bx] ; bl = 40 lido da memoria 1001 em bx
    48 000002EC 88C3                <1>         mov  bl, al
    49 000002EE 58                  <1>         pop  AX               ; resgata AH
    50 000002EF 88D8                <1>         mov  al, bl
    51 000002F1 00E0                <1>         add  al, ah
    52 000002F3 0C80                <1>         or   al, LCD_SETDDRAMADDR ;| ( ah + al)
    53 000002F5 E680                <1>         out LCD_CMD, al
    54 000002F7 B90016              <1>         mov cx, 0x1600
    55 000002FA E8B2FF              <1>         call basicDelay
    56                              <1> 
    57 000002FD C3                  <1>         ret
    58                              <1> setCursor2:
    59 000002FE B01D                <1>         mov  al, 29
    60 00000300 0C80                <1>         or   al, LCD_SETDDRAMADDR ;| ( ah + al)
    61 00000302 E680                <1>         out LCD_CMD, al
    62 00000304 B90016              <1>         mov cx, 0x1600
    63 00000307 E8A5FF              <1>         call basicDelay
    64 0000030A C3                  <1>         ret
    65                              <1> 
    66                              <1> lcdInit:
    67 0000030B B90048              <1>         mov cx, 0x4800
    68 0000030E E89EFF              <1>         call basicDelay
    69                              <1> 
    70 00000311 B030                <1>         mov al, 0x30
    71 00000313 E680                <1>         out LCD_CMD, al
    72                              <1> 
    73 00000315 B90008              <1>         mov cx, 0x0800
    74 00000318 E894FF              <1>         call basicDelay
    75                              <1> 
    76 0000031B B030                <1>         mov al, 0x30
    77 0000031D E680                <1>         out LCD_CMD, al
    78                              <1> 
    79 0000031F B96001              <1>         mov cx, 0x0160
    80 00000322 E88AFF              <1>         call basicDelay
    81                              <1> 
    82 00000325 B038                <1>         mov al, 0x38    ; function set
    83 00000327 E680                <1>         out LCD_CMD, al
    84                              <1> 
    85 00000329 B90016              <1>         mov cx, 0x1600
    86 0000032C E880FF              <1>         call basicDelay
    87                              <1> 
    88 0000032F B008                <1>         mov al, 0x08    ; display off
    89 00000331 E680                <1>         out LCD_CMD, al
    90                              <1> 
    91 00000333 B90016              <1>         mov cx, 0x1600
    92 00000336 E876FF              <1>         call basicDelay
    93                              <1> 
    94 00000339 B001                <1>         mov al, 0x01    ; clear display
    95 0000033B E680                <1>         out LCD_CMD, al
    96                              <1> 
    97 0000033D B90016              <1>         mov cx, 0x1600
    98 00000340 E86CFF              <1>         call basicDelay
    99                              <1> 
   100 00000343 B002                <1>         mov al, 0x02    ; return home
   101 00000345 E680                <1>         out LCD_CMD, al
   102                              <1> 
   103 00000347 B90016              <1>         mov cx, 0x1600
   104 0000034A E862FF              <1>         call basicDelay
   105                              <1> 
   106 0000034D B006                <1>         mov al, 0x06    ; entry mode set
   107 0000034F E680                <1>         out LCD_CMD, al
   108                              <1> 
   109 00000351 B90016              <1>         mov cx, 0x1600
   110 00000354 E858FF              <1>         call basicDelay
   111                              <1> 
   112 00000357 B00C                <1>         mov al, 0x0c    ; display on, no cursor
   113 00000359 E680                <1>         out LCD_CMD, al
   114                              <1> 
   115 0000035B B90016              <1>         mov cx, 0x1600
   116 0000035E E84EFF              <1>         call basicDelay
   117 00000361 C3                  <1>         ret
   118                              <1> 
   194                                  ;%include "serial1.inc"	
   195                                  ;%include "serial2.inc"	
   196                                  ;%include "errno.inc"	
   197                                  ;%include "messages.inc"	
   198                                  
   199 00000362 FF<rep 1C8Eh>                   setloc	0FFF0h			; Power-On Entry Point
   199          ******************       warning: Inserting 7310 bytes [-w+user]
   200                                  reset:
   201 00001FF0 EA[0000]00F0                    jmp 0xF000:init
   202                                  
   203                                          setloc	0FFF5h			; ROM Date in ASCII
   204 00001FF5 32322F31302F3234                db	DATE			; BIOS release date MM/DD/YY
   205 00001FFD 20                              db	20h
   206                                  
   207                                          setloc	0FFFEh			; System Model byte
   208 00001FFE FE                              db	MODEL_BYTE
   209 00001FFF FF                              db	0ffh
